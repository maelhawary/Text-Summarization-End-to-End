name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-docker-image:
    name: Continuous Delivery
    needs: integration
    runs-on: self-hosted
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}    

    - name: Login to Docker Hub
      run: echo $DOCKER_PASSWORD | docker login -u $DOCKER_USERNAME --password-stdin
      env:
        DOCKER_USERNAME:  ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }} 


    - name: Check if Docker Hub image exists
      id: check-docker-hub-image
      run: |
        IMAGE_NAME=${{ secrets.DOCKER_USERNAME }}/${{ secrets.Docker_REPOSITORY_NAME }}
        IMAGE_TAG=latest  # Replace with the specific tag you want to check

        # Check if the image tag exists on Docker Hub
        docker pull $IMAGE_NAME:$IMAGE_TAG || exit 0
        IMAGE_EXISTS=$(docker images -q $IMAGE_NAME:$IMAGE_TAG)

        if [ -z "$IMAGE_EXISTS" ]; then
          echo "::set-output name=image_exists::false"
        else
          echo "::set-output name=image_exists::true"
        fi

    - name: Build and Push Docker Image-if-not-exist
      if: steps.check-docker-hub-image.outputs.image_exists == 'false'
      run: |
        docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.Docker_REPOSITORY_NAME }}:latest . 
        docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.Docker_REPOSITORY_NAME }}:latest
        docker image rm -f ${{ secrets.DOCKER_USERNAME }}/${{ secrets.Docker_REPOSITORY_NAME }}:latest
  
    - name: Run Docker Image to serve users
      run: |
        docker run -d -p 5000:8501 ${{ secrets.DOCKER_USERNAME }}/${{ secrets.Docker_REPOSITORY_NAME }}:latest
    - name: Clean previous images and containers
      run: |
        docker system prune -f

